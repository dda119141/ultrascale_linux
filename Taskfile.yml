# https://taskfile.dev

version: '3'

vars:
  TOOLCHAIN_BMT: 
    sh: echo "{{.USER_WORKING_DIR}}/toolchain/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-elf"
  TOP_DIR:
    sh: echo $(pwd)

includes:
  toolchain:
    taskfile: ./toolchain/Taskfile.yml
  ramfs: 
    taskfile: ./filesystems/initramfs/Taskfile.yml
    dir: ./filesystems/initramfs/
  rootfs: 
    taskfile: ./filesystems/rootfs/Taskfile.yml
    dir: ./filesystems/rootfs/
  kernel: 
    taskfile: ./kernel/Taskfile.yml
    dir: ./kernel
  earlyboot: 
    taskfile: ./bootloader/Taskfile.yml
    dir: ./bootloader
    vars:
      TOOLCHAIN_DIR: "{{.TOOLCHAIN_BMT}}"
      BASE_DIR: "{{.ROOT_DIR}}"
      HW_DESC_DIR: "{{.TOP_DIR}}/system_hw_description"
      DIR_BOOTLOADER: "{{.TOP_DIR}}/bootloader"


tasks:
  build_flash_stripe_util:
    aliases: [bfsu]
    desc: "clone and build flash stripe utility"
    cmds:
      - dpkg -l build-essential >/dev/null && echo "continue" || sudo apt install build-essential
      - test -d qemu-ug-examples && rm -rf qemu-ug-examples || echo "continue"
      - git clone https://github.com/Xilinx/qemu-ug-examples.git qemu-ug-examples
      - cd qemu-ug-examples && git checkout 8b3082b0a50cdc79e0a8e343dd845d61c1285f6b 
      - cd qemu-ug-examples/flash_stripe_utilities/ && gcc flash_stripe.c -o flash_strip_bw -DFLASH_STRIPE_BW
    sources:
      - qemu-ug-examples/flash_stripe_utilities/flash_strip.c
    generates:
      - qemu-ug-examples/flash_stripe_utilities/flash_strip_bw


  build_qemu_qspi_drive:
    dir: qemu
    #deps: [build_flash_stripe_util, build_itb]
    deps: [build_flash_stripe_util]
    aliases: [bqqd]
    desc: "build qspi persistent memory fo qemu (NOR) "
    summary: |
      build qspi persistent memory fo qemu (NOR)
      zynq ultrascale only support 128 MB QSPI in dual parallel mode
      so 2 virtual NOR memory devices need to be created, each of it
    vars:
      bin_name: qemu_qspi.bin
      kernel: "../kernel/Image.itb"
      #initramfs: "../filesystems/initramfs.cpio.gz"
      bootbin: "{{.ROOT_DIR}}/bootloader/generated/boot.bin"
      bootscr: "{{.ROOT_DIR}}/bootloader/boot.scr"
      flash_stripe: "{{.ROOT_DIR}}/qemu-ug-examples/flash_stripe_utilities/flash_strip_bw"
    cmds:
      - task: toolchain:export_bmt
      - task: earlyboot:build_bootbin
      - dd if=/dev/zero of={{.bin_name}} bs=128M count=1
      - dd if={{.bootbin}} of={{.bin_name}} bs=1 seek=0 conv=notrunc
      - dd if={{.bootscr}} of={{.bin_name}} bs=1 seek=65536000 conv=notrunc #offset 0x3e80000
      - dd if={{.kernel}} of={{.bin_name}} bs=1 seek=15990784 conv=notrunc #offset 0xF40000
      - "{{.flash_stripe}} qemu_qspi.bin qemu_qspi_low.bin qemu_qspi_high.bin"

  create_sd_drive:
    dir: drives
    desc: "create sd drive"
    internal: true
    vars:
      sd_drive_bin_name: qemu_sd.img
    cmds:
      - sudo apt install nbd-client nbd-server
      - sudo modprobe nbd #Load the necessary kernel modules
      - sudo qemu-img create {{.sd_drive_bin_name}} 2G
      - sudo qemu-nbd -f raw -c /dev/nbd0 {{.sd_drive_bin_name}} # connect image to network block device nbd
        #- qemu-nbd {{.sd_drive_bin_name}} & # connect image to network block device nbd
        #- sudo nbd-client localhost 1024 /dev/nbd0 #Connect to the disk

  partition_sd_drive:
    aliases: [psd]
    dir: drives
    deps: [create_sd_drive]
    desc: "partition sd drive"
    cmds:
        #- sudo sfdisk -d /dev/nbd0 > sd_card.layout
      - sudo sfdisk /dev/nbd0 < sd_card.layout
        #      - sudo fdisk /dev/nbd0 # for manually partitionning
      - sudo mkfs.vfat /dev/nbd0p1
      - sudo mkfs.ext3 /dev/nbd0p2

  disconnect_nbd:
    desc: "Once the files are copied, disconnect the nbd connection"
    internal: true
    cmds:
      - sudo qemu-nbd -d /dev/nbd0
   
 
  build_qemu_sd_drive:
    aliases: [bqsd]
    desc: "build qemu sd drive"
    vars:
      rootfs: "{{.TASKFILE_DIR}}/filesystems/rootfs/generated/rootfs/rootfs.ext3"
    cmds:
      - task: partition_sd_drive
      - task: rootfs:default
      - sudo dd if={{.rootfs}} of=/dev/nbd0p2 bs=512M count=1
      - task: disconnect_nbd
  
  build_itb:
    dir: kernel
    aliases: [bitb]
    desc: "build linux itb image"
    vars:
      kernel: "generated/src/arch/arm64/boot/Image"
      dtb: "device-tree/zynqmp-zcu102-rev1.0.dtb"
      initramfs: "{{.ROOT_DIR}}/filesystems/initramfs/generated/initramfs.cpio.gz"
    sources:
      - "{{.kernel}}"
      - "{{.dtb}}"
      - "{{.initramfs}}"
    generates:
      - "Image.itb"
    cmds:
     - dpkg -l u-boot-tools && echo "continue" || sudo apt install u-boot-tools #for mkimage
     - task: kernel:bk
     - task: ramfs:bir
     - ln -sf {{.kernel}} Image
     - ln -sf {{.dtb}} kernel.dtb
     - ln -sf {{.initramfs}} initramfs.cpio.gz
     - mkimage -f zcu102.its Image.itb


