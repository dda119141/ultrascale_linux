# https://taskfile.dev

version: '3'

vars:
  TOOLCHAIN_BMT: 
    sh: echo "{{.USER_WORKING_DIR}}/toolchain/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-elf"
  TOP_DIR:
    sh: echo $(pwd)
  QEMU_UG_OUTPUT: "{{.TOP_DIR}}/generated/qemu-ug-examples"
  QEMU_GENERATED: "{{.TOP_DIR}}/generated/qemu"
  QEMU_GENERATED_OUT: "{{.TOP_DIR}}/generated/qemu/out"
  DIR_BOOTLOADER_TOP: '{{.USER_WORKING_DIR}}/generated/bootloader'

includes:
  toolchain:
    taskfile: ./toolchain/Taskfile.yml
    internal: true
  qemu: 
    taskfile: ./qemu/Taskfile.yml
    dir: ./qemu
    internal: true
  ramfs: 
    taskfile: ./filesystems/initramfs/Taskfile.yml
    dir: ./filesystems/initramfs/
    internal: true
  rootfs: 
    taskfile: ./filesystems/rootfs/Taskfile.yml
    dir: ./filesystems/rootfs/
    internal: true
  kernel: 
    taskfile: ./kernel/Taskfile.yml
    dir: ./kernel
    internal: true
  earlyboot: 
    taskfile: ./bootloader/Taskfile.yml
    dir: ./bootloader
    internal: true
    vars:
      TOOLCHAIN_DIR: "{{.TOOLCHAIN_BMT}}"
      BASE_DIR: "{{.USER_WORKING_DIR}}"
      HW_DESC_DIR: "{{.TOP_DIR}}/system_hw_description"
      DIR_BOOTLOADER: "{{.USER_WORKING_DIR}}/generated/bootloader"

tasks:
  clone_flash_stripe_util:
    desc: "clone flash stripe utility"
    dir: "{{.QEMU_UG_OUTPUT}}"
    internal: true
    vars:
      GIT_VERSION: "8b3082b0a50cdc79e0a8e343dd845d61c1285f6b"
    status:
      - cat qemu_uge/.git/HEAD | grep {{.GIT_VERSION}}
    cmds:
      - dpkg -l build-essential >/dev/null && echo "continue" || sudo apt install build-essential
      - git clone https://github.com/Xilinx/qemu-ug-examples.git qemu_uge
      - cd qemu_uge && git checkout 8b3082b0a50cdc79e0a8e343dd845d61c1285f6b 
 
  build_flash_stripe_util:
    aliases: [bfsu]
    desc: "clone and build flash stripe utility"
    dir: "{{.QEMU_UG_OUTPUT}}"
    internal: true
    cmds:
      - task: clone_flash_stripe_util
      - cd qemu_uge/flash_stripe_utilities/ && gcc flash_stripe.c -o flash_strip_bw -DFLASH_STRIPE_BW
    sources:
      - qemu_uge/flash_stripe_utilities/flash_strip.c
    generates:
      - qemu_uge/flash_stripe_utilities/flash_strip_bw

  create_qemu_folder:
    desc: "create kernel folder"
    internal: true
    cmds:
     - test -d {{.USER_WORKING_DIR}}/generated || mkdir {{.USER_WORKING_DIR}}/generated
     - test -d {{.QEMU_GENERATED}} || mkdir {{.QEMU_GENERATED}}
     - test -d {{.QEMU_GENERATED_OUT}} || mkdir {{.QEMU_GENERATED_OUT}}

  build_qemu_qspi_drive:
    dir: qemu
    deps: [build_flash_stripe_util]
    aliases: [bqqd]
    desc: "build qspi persistent memory fo qemu (NOR) "
    summary: |
      build qspi persistent memory fo qemu (NOR)
      zynq ultrascale only support 128 MB QSPI in dual parallel mode
      so 2 virtual NOR memory devices need to be created, each of it
    vars:
      bin_name: qemu_qspi.bin
      itb_container: "{{.USER_WORKING_DIR}}/generated/kernel/Image.itb"
      kernel: "{{.itb_container}}"
      bootbin: "{{.USER_WORKING_DIR}}/generated/bootloader/boot.bin"
      bootscr: "{{.TASKFILE_DIR}}/bootloader/boot.scr"
      flash_stripe: "{{.QEMU_UG_OUTPUT}}/qemu_uge/flash_stripe_utilities/flash_strip_bw"
    cmds:
      - task: create_qemu_folder
      - task: toolchain:export_bmt
      - task: earlyboot:build_bootbin
      - task: build_itb
      - dd if=/dev/zero of={{.QEMU_GENERATED_OUT}}/{{.bin_name}} bs=128M count=1
      - dd if={{.bootbin}} of={{.QEMU_GENERATED_OUT}}/{{.bin_name}} bs=1 seek=0 conv=notrunc
      - dd if={{.bootscr}} of={{.QEMU_GENERATED_OUT}}/{{.bin_name}} bs=1 seek=65536000 conv=notrunc #offset 0x3e80000
      - dd if={{.kernel}} of={{.QEMU_GENERATED_OUT}}/{{.bin_name}} bs=1 seek=15990784 conv=notrunc #offset 0xF40000
      - "{{.flash_stripe}} {{.QEMU_GENERATED_OUT}}/qemu_qspi.bin {{.QEMU_GENERATED_OUT}}/qemu_qspi_low.bin {{.QEMU_GENERATED_OUT}}/qemu_qspi_high.bin"

  create_sd_drive:
    desc: "create sd drive"
    deps: [qemu:build_qemu]
    internal: true
    vars:
      sd_drive_bin_name: qemu_sd.img
      qemu_img: "{{.USER_WORKING_DIR}}/generated/qemu/src/build/qemu-img"
      qemu_nbd: "{{.USER_WORKING_DIR}}/generated/qemu/src/build/qemu-nbd"
    cmds:
      - sudo apt install nbd-client nbd-server
      - sudo modprobe nbd #Load the necessary kernel modules
      - sudo {{.qemu_img}} create {{.QEMU_GENERATED_OUT}}/{{.sd_drive_bin_name}} 2G
      - sudo {{.qemu_nbd}} -f raw -c /dev/nbd0 {{.QEMU_GENERATED_OUT}}/{{.sd_drive_bin_name}} # connect image to network block device nbd
        #- qemu-nbd {{.sd_drive_bin_name}} & # connect image to network block device nbd
        #- sudo nbd-client localhost 1024 /dev/nbd0 #Connect to the disk

  partition_sd_drive:
    aliases: [psd]
    internal: true
    dir: drives
    deps: [create_sd_drive]
    desc: "partition sd drive"
    cmds:
      - sudo sfdisk /dev/nbd0 < sd_card.layout
        #      - sudo fdisk /dev/nbd0 # for manually partitionning
      - sudo mkfs.vfat /dev/nbd0p1
      - sudo mkfs.ext3 /dev/nbd0p2

  disconnect_nbd:
    desc: "Once the files are copied, disconnect the nbd connection"
    internal: true
    deps: [qemu:build_qemu]
    vars:
      qemu_nbd: "{{.USER_WORKING_DIR}}/generated/qemu/src/build/qemu-nbd"
    cmds:
      - sudo {{.qemu_nbd}} -d /dev/nbd0
   
 
  build_qemu_sd_drive:
    aliases: [bqsd]
    desc: "build qemu sd drive"
    vars:
      rootfs: "{{.USER_WORKING_DIR}}/generated/rootfs/rootfs.ext3"
    cmds:
      - task: partition_sd_drive
      - task: rootfs:default
      - sudo dd if={{.rootfs}} of=/dev/nbd0p2 bs=512M count=1
      - task: disconnect_nbd
  
  build_itb:
    dir: kernel
    aliases: [bitb]
    internal: true
    desc: "build linux itb image"
    vars:
      kernel: "{{.USER_WORKING_DIR}}/generated/kernel/src/arch/arm64/boot/Image"
      dtb: "{{.USER_WORKING_DIR}}/generated/kernel/src/arch/arm64/boot/dts/xilinx/zynqmp-zcu102-rev1.0.dtb"
      initramfs: "{{.USER_WORKING_DIR}}/generated/initramfs/initramfs.cpio.gz"
      itb_container: "{{.USER_WORKING_DIR}}/generated/kernel/Image.itb"
    sources:
      - "{{.kernel}}"
      - "{{.dtb}}"
      - "{{.initramfs}}"
    generates:
      - "{{.itb_container}}"
    cmds:
     - dpkg -l | grep u-boot-tools && echo "continue" || sudo apt install u-boot-tools -y  #for mkimage
     - task: kernel:cbk
     - ln -sf {{.kernel}} Image
     - ln -sf {{.dtb}} kernel.dtb
     - mkimage -f zcu102.its {{.itb_container}}
       #     - task: ramfs:bir
       #     - ln -sf {{.initramfs}} initramfs.cpio.gz

  start_os_on_qemu:
    aliases: [sooq]
    desc: "start os on qemu emulator"
    vars:
      qemu_xilinx: "{{.USER_WORKING_DIR}}/generated/qemu/src/build"
      pmu_dtb: "{{.DIR_BOOTLOADER_TOP}}/pmu/qemu_dtb_src/LATEST/MULTI_ARCH/zynqmp-pmu.dtb"
      pmu_rom: "{{.DIR_BOOTLOADER_TOP}}/pmu/src/PMU_ROM/pmu-rom.elf"
      hw_dtb: "{{.DIR_BOOTLOADER_TOP}}/pmu/qemu_dtb_src/LATEST/MULTI_ARCH/zcu102-arm.dtb"
      fsbl: "{{.DIR_BOOTLOADER_TOP}}/coreboot/src/build/fsboot_a53_zc102.elf"
      qemu_shmdir: "/tmp/tmpmor_aano"
      QSPI_24BIT: "1"
      QSPI_24BIT_INDEX: "0"
      QSPI_32BIT: "2"
      QSPI_32BIT_INDEX: "1"
    cmds:
      - task: earlyboot:pmu:build_qemu_devicetrees
      - test -d {{.qemu_shmdir}} && rm -rvf {{.qemu_shmdir}} || echo "continue"
      - test -d {{.qemu_shmdir}} || mkdir {{.qemu_shmdir}}
      - touch {{.qemu_shmdir}}/qemu-rport-_pmu@0
      - |
        sudo {{.qemu_xilinx}}/qemu-system-microblazeel -M microblaze-fdt \
        -display none \
        -hw-dtb {{.pmu_dtb}} \
        -kernel {{.pmu_rom}} \
        -machine-path {{.qemu_shmdir}} \
        & \
        sudo {{.qemu_xilinx}}/qemu-system-aarch64 \
        -machine arm-generic-fdt \
        -m 4096 \
        -nographic \
        -chardev stdio,mux=on,id=char0,logfile={{.QEMU_GENERATED}}/os_boot.log,signal=off \
        -mon chardev=char0,mode=readline \
        -serial chardev:char0 \
        -hw-dtb {{.hw_dtb}} \
        -global xlnx,zynqmp-boot.cpu-num=0 \
        -global xlnx,zynqmp-boot.use-pmufw=false \
        -device loader,file={{.fsbl}},cpu-num=0 \
        -drive file={{.QEMU_GENERATED_OUT}}/qemu_qspi_low.bin,if=mtd,format=raw,index=0 \
        -drive file={{.QEMU_GENERATED_OUT}}/qemu_qspi_high.bin,if=mtd,format=raw,index=1 \
        -drive file={{.QEMU_GENERATED_OUT}}/qemu_sd.img,if=sd,format=raw,index=1 \
        -boot mode={{.QSPI_32BIT}} \
        -machine-path {{.qemu_shmdir}} \

  start_pmu_on_qemu:
    aliases: [spmuoq]
    vars:
      qemu_xilinx: "{{.USER_WORKING_DIR}}/generated/qemu/src/build"
        # pmu_dtb: "{{.DIR_BOOTLOADER_TOP}}/pmu/qemu_dtb_src/LATEST/MULTI_ARCH/zynqmp-pmu.dtb"
      pmu_dtb: "{{.DIR_BOOTLOADER_TOP}}/pmu/qemu_dtb_src/LATEST/MULTI_ARCH/board-zynqmp-zcu102.dtb"
      pmu_rom: "{{.DIR_BOOTLOADER_TOP}}/pmu/src/PMU_ROM/pmu-rom.elf"
      hw_dtb: "{{.DIR_BOOTLOADER_TOP}}/pmu/qemu_dtb_src/LATEST/MULTI_ARCH/zcu102-arm.dtb"
      qemu_shmdir: "/tmp/tmpmor_aano"
    cmds:
      - test -d {{.qemu_shmdir}} && rm -rvf {{.qemu_shmdir}} || echo "continue"
      - test -d {{.qemu_shmdir}} || mkdir {{.qemu_shmdir}}
      - touch {{.qemu_shmdir}}/qemu-rport-_pmu@0
      - |
        sudo {{.qemu_xilinx}}/qemu-system-microblazeel -M microblaze-fdt \
        -display none \
        -hw-dtb {{.pmu_dtb}} \
        -kernel {{.pmu_rom}} \
        -machine-path {{.qemu_shmdir}} 
 
  start_fsbl_on_qemu_debug:
    aliases: [sfoqd]
    desc: "start fsbl on qemu emulator with -gdb tcp::1234 (arg -s) "
    summary: |
      in order to use it, go to fsbl dir and 
      start gdb e.g aarch64-none-elf-gdb fsbl_a53.elf
      then perform "target remote :1234" for remote
      debugging (gdb_on_host <-- tcp:1234 --> fsbl on qemu)
    vars:
      qemu_xilinx: "{{.USER_WORKING_DIR}}/generated/qemu/src/build"
      pmu_dtb: "{{.DIR_BOOTLOADER_TOP}}/pmu/src/LATEST/MULTI_ARCH/zynqmp-pmu.dtb"
      pmu_rom: "{{.DIR_BOOTLOADER_TOP}}/pmu/src/PMU_ROM/pmu-rom.elf"
      hw_dtb: "{{.DIR_BOOTLOADER_TOP}}/pmu/qemu_dtb_src/LATEST/MULTI_ARCH/zcu102-arm.dtb"
      fsbl: "{{.DIR_BOOTLOADER_TOP}}/coreboot/src/build/fsboot_a53_zc102.elf"
      qemu_shmdir: "/tmp/tmpmor_aano"
      QSPI_24BIT: "1"
      QSPI_24BIT_INDEX: "0"
      QSPI_32BIT: "2"
      QSPI_32BIT_INDEX: "1"
    cmds:
      - test -d {{.qemu_shmdir}} && rm -rvf {{.qemu_shmdir}}
      - test -d {{.qemu_shmdir}} || mkdir -p {{.qemu_shmdir}}
      - touch {{.qemu_shmdir}}/qemu-rport-_pmu@0
      - |
        sudo {{.qemu_xilinx}}/qemu-system-microblazeel -M microblaze-fdt \
        -display none \
        -hw-dtb {{.pmu_dtb}} \
        -kernel {{.pmu_rom}} \
        -machine-path {{.qemu_shmdir}} \
        & \
        sudo {{.qemu_xilinx}}/qemu-system-aarch64 \
        -machine arm-generic-fdt \
        -m 4096 \
        -s -S \
        -nographic \
        -chardev stdio,mux=on,id=char0,logfile={{.QEMU_GENERATED}}/os_boot_debug.log,signal=off \
        -mon chardev=char0,mode=readline \
        -serial chardev:char0 \
        -hw-dtb {{.hw_dtb}} \
        -global xlnx,zynqmp-boot.cpu-num=0 \
        -global xlnx,zynqmp-boot.use-pmufw=false \
        -device loader,file={{.fsbl}},cpu-num=0 \
        -drive file={{.QEMU_GENERATED_OUT}}/qemu_qspi_low.bin,if=mtd,format=raw,index=0 \
        -drive file={{.QEMU_GENERATED_OUT}}/qemu_qspi_high.bin,if=mtd,format=raw,index=1 \
        -boot mode={{.QSPI_32BIT}} \
        -machine-path {{.qemu_shmdir}}


  build_and_start_os:
    aliases: [basos]
    desc: "build os and launch it on qemu emulator"
    cmds:
      - task: qemu:build_qemu
      - task: build_qemu_qspi_drive
      - task: build_qemu_sd_drive
      - task: start_os_on_qemu
 
